package cassandra;

import java.util.List;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;

public class WeatherStation {

	private static Cluster cluster = null;

	private static Session session = null;

	/**
	 * Connect to a Cassandra DB
	 *
	 * @param ip 127.0.0.1 by default
	 * @param port 9042 by default
	 */
	public void connect(String ip, Integer port) {
		cluster = Cluster.builder()
				.addContactPoint(ip)
				.withPort(port)
				.build();

		session = cluster.connect();
	}

	public Session getSession() {
		return this.session;
	}

	public void close() {
		session.close();
		cluster.close();
	}

	/**
	 * Create a KEYSPACE from the given arguments
	 *
	 * @param keyspaceName
	 * @param replicationStrategy SimpleStrategy by default
	 * @param replicationFactor 1 by default
	 */
	public void createKeyspace(String keyspaceName, String replicationStrategy, int replicationFactor) {
		StringBuilder sb = new StringBuilder("CREATE KEYSPACE IF NOT EXISTS ")
						.append(keyspaceName).append(" WITH replication = {")
						.append("'class':'").append(replicationStrategy)
						.append("','replication_factor':").append(replicationFactor)
						.append("};");

		String query = sb.toString();
		session.execute(query);
	}

	/**
	 * Drop the whole given table
	 *
	 */
	public void dropTable(String table) {
		session.execute("DROP TABLE " + table);
	}
	/**
	 * Create a weather table unit.
	 *
	 */
	public void createWeatherTable() {
		StringBuilder sb = new StringBuilder("CREATE TABLE IF NOT EXISTS ")
				.append("weather")
				.append("(")
				.append("idWeatherUnit UUID PRIMARY KEY,")
				.append("idStation bigint,")
				.append("longitude double,")
				.append("latitude double, ")
				.append("time timestamp, ")
				.append("temperature float,")
				.append("humidity float,")
				.append("pressure float,")
				.append(");");

		String query = sb.toString();
		session.execute(query);
	}

	/**
	 * Insert values in Weather. The UUID is auto-generated by Cassandra thanks to now() function.
	 *
	 * @param idStation Id station where the metrics come from
	 * @param longitude Longitude (double)
	 * @param latitude Latitude (double)
	 * @param time Timestamp (timestamp in seconds)
	 * @param temperature (float)
	 * @param humidity (float percentage between 0 and 100)
	 * @param pressure (pressure float in hPa)
	 */
	public void insertWeather(long idStation, double longitude, double latitude, long time, float temperature, float humidity, float pressure) {
		StringBuilder sb = new StringBuilder("INSERT INTO weather")
				.append("(idWeatherUnit, idStation, longitude, latitude, time, temperature, humidity, pressure)")
				.append("VALUES (")
				.append("now(), ") //Generate UUID
				.append(idStation +", ")
				.append(longitude +", ")
				.append(latitude +", ")
				.append(time +", ")
				.append(temperature +", ")
				.append(humidity +", ")
				.append(pressure)
				.append(");");

		String query = sb.toString();
		session.execute(query);
	}

	/**
	 * Create a station where its ID is a long.
	 */
	public void createStationTable() {
		StringBuilder sb = new StringBuilder("CREATE TABLE IF NOT EXISTS ")
				.append("station")
				.append("(")
				.append("idStation bigint PRIMARY KEY,")
				.append("stationDescription text")
				.append(");");

		String query = sb.toString();
		session.execute(query);
	}

	public void insertStation(long idStation, String stationDescription) {
		StringBuilder sb = new StringBuilder("INSERT INTO station")
				.append("(idStation, stationDescription)")
				.append("VALUES (")
				//.append("now(), ") //Generate UUID
				.append(idStation +", ")
				.append(stationDescription)
				.append(");");

		String query = sb.toString();
		session.execute(query);
	}

	/**
	 * Execute and display a given query
	 *
	 * @param query to execute, i.e. "SELECT * FROM weather"
	 */
	public void executeAndDisplayQuery(String query){
		System.out.println(Utils.YELLOW + "\n[INFO] " + Utils.RESET + query );

		try {
			// Exécution de la requête
			ResultSet rs = session.execute(query);

			// Récupération et traitement du résultat
			List<Row> rows = rs.all();
			for (Row row : rows) {
				System.out.println(row.toString());
			}
		} finally {
			if (cluster != null) cluster.close();
		}

		System.out.println(Utils.GREEN + "[INFO] " + Utils.RESET + "Done.");
	}

	public static void main(String[] args) {

		String keyspaceName = "weatherStation";

		WeatherStation client = new WeatherStation();
		client.connect("127.0.0.1", 9042);

		session = client.getSession();

		// Create keyspace if it doesn't exist
		client.createKeyspace(keyspaceName, "SimpleStrategy", 1);

		// Connect to the keyspace created above
		session = cluster.connect(keyspaceName);

		// Drop tables table for demo
		//client.dropTable("station");
		client.dropTable("weather");

		// Create Station table
		//client.createStationTable();

		// Inserting stations
		//client.insertStation(1, "Station Saint-Etienne");
		//client.insertStation(2, "Station Lyon");


		// Create weather table
		client.createWeatherTable();

		// Inserting values into weather
		client.insertWeather(1, 4.43, 45.434, 1611487364, 1, 20, 1005);
		client.insertWeather(1, 4.43, 45.434, 1611488752, -1, 18, 1000);
		client.insertWeather(2, 6.53, 45.75, 1611487364, 5, 42, 864);
		client.insertWeather(2, 6.53, 45.75, 1611492001, 6, 41, 834);

		client.executeAndDisplayQuery("SELECT * FROM weather");
		//client.executeAndDisplayQuery("SELECT * FROM station");
		client.executeAndDisplayQuery("SELECT * FROM weather WHERE idStation = 2");


	}


}
